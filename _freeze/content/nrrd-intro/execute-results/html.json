{
  "hash": "acaa2462bce56e2d35c96121510bbfff",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"NRRD - Intro\"\n---\n\n\n\n\n\nThe **NRRD (Nearly Raw Raster Data)** file format is used to store and organize scientific and medical imaging data, commonly for 3D and 4D datasets. NRRD files are often used in applications like 3D Slicer for handling multi-dimensional imaging data. The format is flexible, supporting various data types, dimensions, and metadata.\n\n## Overview \n\n### Structure of NRRD File\n\n1. **Header**: Contains metadata about the image, specifying dimensions, data type, spacing, orientation, and other descriptive information. The header is usually in plain text, making it easy to read and edit.\n2. **Data**: Contains the raw imaging data (voxel values). The data can be embedded directly in the `.nrrd` file or stored in a separate file, referred to by the header.\n\n### Basic Structure of an NRRD Header\n\nAn NRRD header typically looks like this:\n\n```plaintext\nNRRD0004\ntype: float\ndimension: 3\nsizes: 256 256 128\nencoding: gzip\nspacings: 1.0 1.0 1.5\naxis-mappings: 0 1 2\nkinds: space space space\nspace origin: (0,0,0)\n```\n\n- **NRRD0004**: Magic number indicating the NRRD format version.\n- **type**: Data type of the voxel values (e.g., `float`, `short`, `int`).\n- **dimension**: Number of dimensions (e.g., 2 for 2D, 3 for 3D).\n- **sizes**: Number of voxels along each dimension.\n- **encoding**: Specifies how the data is stored (e.g., `raw`, `gzip` for compression).\n- **spacings**: Physical spacing between voxels along each axis.\n- **axis-mappings**: Maps data dimensions to spatial dimensions.\n- **kinds**: Specifies the type of each axis (e.g., `space` for spatial dimensions).\n- **space origin**: Coordinates of the origin in physical space.\n\n## `pynrrd`\n\n::: {#c51beb6a .cell execution_count=1}\n``` {.python .cell-code}\nfrom pyhere import here\nimport nrrd\n```\n:::\n\n\nThe `pynrrd` Python library is a popular tool for reading, writing, and manipulating NRRD files. Below are the steps to install `pynrrd` and use it to read NRRD files.\n\n\n### Reading an NRRD File\n\nTo read an NRRD file, use the `nrrd.read()` function, which returns two items:\n\n- **data**: A NumPy array containing the image data.\n- **header**: A dictionary containing the metadata from the NRRD header.\n\nHereâ€™s a basic example:\n\n::: {#5197ffd2 .cell execution_count=2}\n``` {.python .cell-code}\n# Read the NRRD file\ndata, header = nrrd.read(here(\"data/MRI-Brain-Eye/Case1/3 t1 axial Processed_CaPTk.nrrd\"))\n\n# Display the shape of the data\nprint(\"Data shape:\", data.shape)\n\n# Display the header information\nprint(\"Header metadata:\", header)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData shape: (192, 256, 192)\nHeader metadata: OrderedDict([('type', 'unsigned short'), ('dimension', 3), ('space', 'left-posterior-superior'), ('sizes', array([192, 256, 192])), ('space directions', array([[ 0.97656101, -0.00170442,  0.        ],\n       [ 0.00170442,  0.97656101,  0.        ],\n       [ 0.        ,  0.        ,  1.        ]])), ('kinds', ['domain', 'domain', 'domain']), ('endian', 'little'), ('encoding', 'gzip'), ('space origin', array([ -89.87082095, -145.95727884,  -78.06524467]))])\n```\n:::\n:::\n\n\n- **data**: This will be a multi-dimensional NumPy array, with dimensions specified by `header['sizes']`. You can directly manipulate this array or use it for visualization.\n  \n- **header**: A dictionary containing the metadata extracted from the NRRD header, including keys like `type`, `dimension`, `spacings`, and `space origin`.\n\n### Accessing Specific Metadata\n\nYou can access specific metadata fields from the header dictionary:\n\n::: {#3fc7ca78 .cell execution_count=3}\n``` {.python .cell-code}\n# Access voxel spacing\nspacing = header.get('spacings', None)\nprint(\"Voxel Spacing:\", spacing)\n\n# Access data type\ndata_type = header.get('type', None)\nprint(\"Data Type:\", data_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVoxel Spacing: None\nData Type: unsigned short\n```\n:::\n:::\n\n\n### Visualizing a Slice of the NRRD Data\n\nTo visualize a slice of the 3D NRRD data (for example, slice 64 along the z-axis), you can use `matplotlib`:\n\n::: {#6125ce67 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Select a slice from the 3D data\nslice_data = data[:, :, 64]\n\n# Display the slice\nplt.imshow(slice_data, cmap='gray')\nplt.title(\"Slice 64 of the NRRD data\")\nplt.axis('off')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](nrrd-intro_files/figure-html/cell-5-output-1.png){width=512 height=409}\n:::\n:::\n\n\n",
    "supporting": [
      "nrrd-intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}